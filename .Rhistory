popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of Households above $200k: ", round(df_merged$percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = df_merged$percent
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = df_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of Households<br>above $200k",
labFormat = labelFormat(suffix = "%"))
?acs.fetch
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2018, span = 1,# Package only goes to 2013, so end=2012
table.number = "B19123", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2018,# Package only goes to 2013, so end=2012
table.number = "B19123", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2019,# Package only goes to 2013, so end=2012
table.number = "B19123", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2017,# Package only goes to 2013, so end=2012
table.number = "B19123", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
acs.lookup(endyear=2014, span=5, table.number="B01001")
acs.lookup(endyear=2014, span=5, table.number="B19123")
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2015, span = 5, # Package only goes to 2013, so end=2012
table.number = "B03002", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
names(attributes(fetched))    # see what's available
##  [1] "endyear"        "span"           "acs.units"      "currency.year"
##  [5] "modified"       "geography"      "acs.colnames"   "estimate"
##  [9] "standard.error" "class"
attr(fetched, "acs.colnames") # see column names
fetched@estimate
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2011, span = 5, # Package only goes to 2013, so end=2012
table.number = "B05001", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
names(attributes(fetched))    # see what's available
##  [1] "endyear"        "span"           "acs.units"      "currency.year"
##  [5] "modified"       "geography"      "acs.colnames"   "estimate"
##  [9] "standard.error" "class"
attr(fetched, "acs.colnames") # see column names
fetched@acs.colnames[,1]
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Nativity and Citizenship Status in the United States: Total:", "Nativity and Citizenship Status in the United States: Not a U.S. citizen")],
stringsAsFactors = FALSE)
acs_df           <- select(acs_df, 1:3) %>% tbl_df()
acs_df <- select(acs_df, 1:3) %>% tbl_df()
detach("package:tidyverse", unload = TRUE)
library(tidyverse)
acs_df <- select(acs_df, 1:3) %>% tbl_df()
knitr::opts_chunk$set(collapse=TRUE)
library(tidyverse)
library(maptools) # required for rgdal to work correctly
library(tigris)
library(acs)
library(leaflet)
tracts <- tracts(state = 'RI', cb=TRUE)
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2011, span = 5, # Package only goes to 2013, so end=2012
table.number = "B05001", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
## The resulting "fetched" object is not a data.frame; it's a list
names(attributes(fetched))    # see what's available
##  [1] "endyear"        "span"           "acs.units"      "currency.year"
##  [5] "modified"       "geography"      "acs.colnames"   "estimate"
##  [9] "standard.error" "class"
attr(fetched, "acs.colnames") # see column names
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Nativity and Citizenship Status in the United States: Total:", "Nativity and Citizenship Status in the United States: Not a U.S. citizen")],
stringsAsFactors = FALSE)
acs_df <- select(acs_df, 1:3) %>% tbl_df()
rownames(acs_df) <- 1:nrow(acs_df)
names(acs_df)    <- c("GEOID", "total", "non_citizen")
acs_df$percent   <- 100*(acs_df$non_citizen/acs_df$total)
df_merged <- geo_join(tracts, acs_df, "GEOID", "GEOID")
df_merged <- df_merged[df_merged$ALAND>0,]
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of non-U.S. Citizens: ", round(df_merged$percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = df_merged$percent
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = df_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of non-U.S.<br>Citizens",
labFormat = labelFormat(suffix = "%"))
detach("package:maptools", unload = TRUE)
knitr::opts_chunk$set(collapse=TRUE)
library(tidyverse)
# library(maptools) # required for rgdal to work correctly
library(tigris)
library(acs)
library(leaflet)
tracts <- tracts(state = 'RI', cb=TRUE)
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2011, span = 5, # Package only goes to 2013, so end=2012
table.number = "B05001", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
## The resulting "fetched" object is not a data.frame; it's a list
names(attributes(fetched))    # see what's available
##  [1] "endyear"        "span"           "acs.units"      "currency.year"
##  [5] "modified"       "geography"      "acs.colnames"   "estimate"
##  [9] "standard.error" "class"
attr(fetched, "acs.colnames") # see column names
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Nativity and Citizenship Status in the United States: Total:", "Nativity and Citizenship Status in the United States: Not a U.S. citizen")],
stringsAsFactors = FALSE)
acs_df <- select(acs_df, 1:3) %>% tbl_df()
rownames(acs_df) <- 1:nrow(acs_df)
names(acs_df)    <- c("GEOID", "total", "non_citizen")
acs_df$percent   <- 100*(acs_df$non_citizen/acs_df$total)
df_merged <- geo_join(tracts, acs_df, "GEOID", "GEOID")
# there are some tracts with no land that we should exclude
df_merged <- df_merged[df_merged$ALAND>0,]
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of non-U.S. Citizens: ", round(df_merged$percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = df_merged$percent
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = df_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of non-U.S.<br>Citizens",
labFormat = labelFormat(suffix = "%"))
# https://rstudio-pubs-static.s3.amazonaws.com/152226_8ecd5bd53d5e43b5850edee04cbc0ced.html
library(tidyverse)
library(tigris)
library(acs)
library(leaflet)
# Select Rhode Island for tracts
tracts <- tracts(state = 'RI', cb=TRUE)
ri <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2011, span = 5, # Package only goes to 2013, so end=2012
table.number = "B05001", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
attr(ri, "acs.colnames") # see column names
ri_df <- data.frame(
paste0(
str_pad(ri@geography$state,  2, "left", pad="0"),
str_pad(ri@geography$county, 3, "left", pad="0"),
str_pad(ri@geography$tract,  6, "left", pad="0")),
ri@estimate[,c("Nativity and Citizenship Status in the United States: Total:", "Nativity and Citizenship Status in the United States: Not a U.S. citizen")],
stringsAsFactors = FALSE)
ri_df <- select(ri_df, 1:3) %>% tbl_df()
rownames(ri_df) <- 1:nrow(ri_df)
names(ri_df)    <- c("GEOID", "total", "non_citizen")
ri_df$percent   <- 100*(ri_df$non_citizen/ri_df$total)
df_merged <- geo_join(tracts, ri_df, "GEOID", "GEOID")
# there are some tracts with no land that we should exclude
df_merged <- df_merged[df_merged$ALAND>0,]
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of non-U.S. Citizens: ", round(df_merged$percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = df_merged$percent
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = df_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of non-U.S.<br>Citizens",
labFormat = labelFormat(suffix = "%"))
View(ri_df)
View(df_merged)
ri2 <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2013, span = 5, # Package only goes to 2013, so end=2012
table.number = "B14005", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
attr(ri2, "acs.colnames") # see column names
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE)
ri_df <- select(ri_df, 1:3) %>% tbl_df()
# rownames(ri_df) <- 1:nrow(ri_df)
names(ri_df) <- c("GEOID", "total", "non_citizen")
ri_df$percent <- 100*(ri_df$non_citizen/ri_df$total)
df_merged <- geo_join(tracts, ri_df, "GEOID", "GEOID")
# Remove tracts with no land area
df_merged <- df_merged[df_merged$ALAND>0,]
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of non-U.S. Citizens: ", round(df_merged$percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = df_merged$percent
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = df_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of non-U.S.<br>Citizens",
labFormat = labelFormat(suffix = "%"))
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
?colornumeric
?colorNumeric
# Set popup labels
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of non-U.S. Citizens: ", round(df_merged$percent,2))
# Set color palette
pal <- colorNumeric(
palette = "plasma",
domain = df_merged$percent
)
RI<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = df_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of non-U.S.<br>Citizens",
labFormat = labelFormat(suffix = "%"))
htmlwidgets::saveWidget(frameableWidget(RI),'RI.html')
library(tidyverse)
library(tigris)
library(acs)
library(leaflet)
library(htmltools)
library(widgetframe)
# Set popup labels
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of non-U.S. Citizens: ", round(df_merged$percent,2))
# Set color palette
pal <- colorNumeric(
palette = "plasma",
domain = df_merged$percent
)
RI<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = df_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of non-U.S.<br>Citizens",
labFormat = labelFormat(suffix = "%"))
htmlwidgets::saveWidget(frameableWidget(RI),'RI.html')
# Select Rhode Island for tracts
tracts <- tracts(state = 'RI', cb=TRUE)
# Fetch ACS data
ri <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2011, span = 5,
table.number = "B05001",
col.names = "pretty")
# View column names
attr(ri, "acs.colnames")
# Create new dataframe including geolocation data and estimates
ri_df <- data.frame(
paste0(
str_pad(ri@geography$state,  2, "left", pad="0"),
str_pad(ri@geography$county, 3, "left", pad="0"),
str_pad(ri@geography$tract,  6, "left", pad="0")),
ri@estimate[,c("Nativity and Citizenship Status in the United States: Total:", "Nativity and Citizenship Status in the United States: Not a U.S. citizen")],
stringsAsFactors = FALSE)
# Select subset of initial dataframe
ri_df <- dplyr::select(ri_df, 1:3) %>% tbl_df()
# Rename rows
names(ri_df) <- c("GEOID", "total", "non_citizen")
# Calculate percentage of non-U.S. citizens
ri_df$percent <- 100*(ri_df$non_citizen/ri_df$total)
# Spatial join
df_merged <- geo_join(tracts, ri_df, "GEOID", "GEOID")
# Remove any tracts with no land area
df_merged <- df_merged[df_merged$ALAND>0,]
# Set popup labels
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of non-U.S. Citizens: ", round(df_merged$percent,2))
# Set color palette
pal <- colorNumeric(
palette = "plasma",
domain = df_merged$percent
)
RI<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = df_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of non-U.S.<br>Citizens",
labFormat = labelFormat(suffix = "%"))
htmlwidgets::saveWidget(frameableWidget(RI),'RI.html')
leaflet(df_merged) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(percent),
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup)
l2<-leaflet(test2) %>%
addTiles() %>%
addAwesomeMarkers(~lon, ~lat, popup = ~Salary,
icon = awesomeIcons(icon = 'ion-ionic',
library = 'ion',
markerColor = test2$Color_code),
label = lapply(labs, htmltools::HTML),
labelOptions = labelOptions(textsize = "15px",
style=list(
'background'='rgba(243, 241, 239, 1)',
'border-color' = 'rgba(46, 49, 49, 1)',
'border-radius' = '2px',
'border-style' = 'solid',
'border-width' = '2px'))) %>%
addLegend("bottomright",
colors =c("#70AF28",  "#38ADDF", "	#F79530", "#CC3E24", "#575556"),
labels= c("Over £40,000","£30,000 - £39,999","£20,000 - £29,999","Below £20,000","Rate Unavailable"),
title= "Salary",
opacity = 1)
htmlwidgets::saveWidget(frameableWidget(l2),'leafletscrape.html')
# Select Rhode Island for tracts
tracts <- tracts(state = 'RI', cb=TRUE)
# Fetch ACS data
ri <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2011, span = 5,
table.number = "B05001",
col.names = "pretty")
# View column names
attr(ri, "acs.colnames")
css_fix <- "div.info.legend.leaflet-control br {clear: both;}"
html_fix <- htmltools::tags$style(type = "text/css", css_fix)
RI %<>% htmlwidgets::prependContent(html_fix)
RI %>% htmlwidgets::prependContent(html_fix)
blogdown:::serve_site()
# Set popup labels
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of non-U.S. Citizens: ", round(df_merged$percent,2))
# Set color palette
pal <- colorNumeric(
palette = "plasma",
domain = df_merged$percent
)
# Plot
RI<-leaflet(df_merged) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(percent),
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of non-U.S.<br>Citizens",
labFormat = labelFormat(suffix = "%"))
# Workaround for Leaflet bug with NA in legend
css_fix <- "div.info.legend.leaflet-control br {clear: both;}"
html_fix <- htmltools::tags$style(type = "text/css", css_fix)
RI %>% htmlwidgets::prependContent(html_fix)
htmlwidgets::saveWidget(frameableWidget(RI),'RI.html')
# Set popup labels
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of non-U.S. Citizens: ", round(df_merged$percent,2))
# Set color palette
pal <- colorNumeric(
palette = "plasma",
domain = df_merged$percent
)
# Plot
RI<-leaflet(df_merged) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(percent),
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of non U.S.<br>born citizens",
labFormat = labelFormat(suffix = "%"))
# Workaround for Leaflet bug with NA in legend
css_fix <- "div.info.legend.leaflet-control br {clear: both;}"
html_fix <- htmltools::tags$style(type = "text/css", css_fix)
RI %>% htmlwidgets::prependContent(html_fix)
htmlwidgets::saveWidget(frameableWidget(RI),'RI.html')
# Set popup labels
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of non-U.S. Citizens: ", round(df_merged$percent,2))
# Set color palette
pal <- colorNumeric(
palette = "plasma",
domain = df_merged$percent
)
# Plot
RI<-leaflet(df_merged) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(percent),
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of non <br>U.S.-born citizens",
labFormat = labelFormat(suffix = "%"))
# Workaround for Leaflet bug with NA in legend
css_fix <- "div.info.legend.leaflet-control br {clear: both;}"
html_fix <- htmltools::tags$style(type = "text/css", css_fix)
RI %>% htmlwidgets::prependContent(html_fix)
htmlwidgets::saveWidget(frameableWidget(RI),'RI.html')
# Set popup labels
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of non-U.S. Citizens: ", round(df_merged$percent,2))
# Set color palette
pal <- colorNumeric(
palette = "plasma",
domain = df_merged$percent
)
# Plot
RI<-leaflet(df_merged) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(percent),
color = "#b2aeae",
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of non <br>US-born citizens",
labFormat = labelFormat(suffix = "%"))
# Workaround for Leaflet bug with NA in legend
css_fix <- "div.info.legend.leaflet-control br {clear: both;}"
html_fix <- htmltools::tags$style(type = "text/css", css_fix)
RI %>% htmlwidgets::prependContent(html_fix)
htmlwidgets::saveWidget(frameableWidget(RI),'RI.html')
htmlwidgets::saveWidget(frameableWidget(RI),'RI.html')
