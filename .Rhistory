api.key.install(key="6502aa373246a1921b24d08fd318cd845aa484c7")
geo<-geo.make(state=c("RI"), tract="*")
geo<-geo.make(state=c("RI"),
county=c(5, 6, 7, 8, 9), tract="*")
income<-acs.fetch(endyear = 2012, span = 5, geography = geo,
table.number = "B19001", col.names = "pretty")
income<-acs.fetch(endyear = 2013, geography = geo,
table.number = "B19001", col.names = "pretty")
income<-acs.tables.install(endyear = 2013, geography = geo,
table.number = "B19001", col.names = "pretty")
?acs.fetch()
income<-acs.fetch(endyear = 2012, span = 5, geography = geo,
table.number = "B19001", col.names = "pretty")
income<-acs.fetch(endyear = 2018, span = 5, geography = geo,
table.number = "B19001", col.names = "pretty")
income<-acs.fetch(endyear = 2018, span = 1, geography = geo,
table.number = "B19001", col.names = "pretty")
income<-acs.fetch(endyear = 2018, span = 1, geography = geo,
table.number = "B19001_001M", col.names = "pretty")
counties <- c(5, 47, 61, 81, 85)
tracts <- tracts(state = 'NY', county = c(5, 47, 61, 81, 85), cb=TRUE)
api.key.install(key="6502aa373246a1921b24d08fd318cd845aa484c7")
geo<-geo.make(state=c("NY"),
county=c(5, 47, 61, 81, 85), tract="*")
income<-acs.fetch(endyear = 2012, span = 5, geography = geo,
table.number = "B19001", col.names = "pretty")
names(attributes(income))
names(attributes(income))
attr(income, "acs.colnames")
income_df <- data.frame(paste0(str_pad(income@geography$state, 2, "left", pad="0"),
str_pad(income@geography$county, 3, "left", pad="0"),
str_pad(income@geography$tract, 6, "left", pad="0")),
income@estimate[,c("Household Income: Total:",
"Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
income_df <- select(income_df, 1:3)
rownames(income_df)<-1:nrow(income_df)
names(income_df)<-c("GEOID", "total", "over_200")
income_df$percent <- 100*(income_df$over_200/income_df$total)
income_merged<- geo_join(tracts, income_df, "GEOID", "GEOID")
# there are some tracts with no land that we should exclude
income_merged <- income_merged[income_merged$ALAND>0,]
map3<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = income_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = income_merged$percent,
position = "bottomright",
title = "Percent of Households<br>above $200k",
labFormat = labelFormat(suffix = "%"))
map3
popup <- paste0("GEOID: ", income_merged$GEOID, "<br>", "Percent of Households above $200k: ", round(income_merged$percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = income_merged$percent
)
map3<-leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = income_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = income_merged$percent,
position = "bottomright",
title = "Percent of Households<br>above $200k",
labFormat = labelFormat(suffix = "%"))
map3
counties <- c(5, 47, 61, 81, 85)
tracts <- tracts(state = 'RI', county = c(5, 47, 61, 81, 85), cb=TRUE)
counties <- c(5, 6, 7, 8, 9)
tracts <- tracts(state = 'RI', county = c(5, 6, 7, 8, 9), cb=TRUE)
counties <- c(5, 11, 7, 14, 9)
tracts <- tracts(state = 'RI', county = c(5, 11, 7, 14, 9), cb=TRUE)
counties <- c(1, 2, 3, 4, 5)
tracts <- tracts(state = 'RI', county = c(1, 2, 3, 4, 5), cb=TRUE)
counties <- c(1, 2, 3, 4)
tracts <- tracts(state = 'RI', county = c(1, 2, 3, 4), cb=TRUE)
tracts <- tracts(state = 'RI'cb=TRUE)
api.key.install(key="6502aa373246a1921b24d08fd318cd845aa484c7")
geo<-geo.make(state=c("RI"), tract="*")
tracts <- tracts(state = 'RI',cb=TRUE)
geo<-geo.make(state=c("RI"), tract="*")
geo<-geo.make(state="RI", tract="*")
geo<-geo.make(state=c("RI"),county=c(5, 3), tract="*")
income<-acs.fetch(endyear = 2018, span = 1, geography = geo,
table.number = "B19001", col.names = "pretty")
geo<-geo.make(state=c("RI"),county=3, tract="*")
income<-acs.fetch(endyear = 2018, span = 1, geography = geo,
table.number = "B19001", col.names = "pretty")
counties <- c(1, 3, 5, 7,9)
tracts <- tracts(state = 'RI', county = c(1, 3, 5, 7,9), cb=TRUE)
api.key.install(key="6502aa373246a1921b24d08fd318cd845aa484c7")
geo<-geo.make(state=c("RI"),
county=c(1, 3, 5, 7,9), tract="*")
income<-acs.fetch(endyear = 2018, span = 1, geography = geo,
table.number = "B19001", col.names = "pretty"
income<-acs.fetch(endyear = 2018, span = 1, geography = geo,
table.number = "B19001", col.names = "pretty")
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2012, span = 5,# Package only goes to 2013, so end=2012
table.number = "B19001", # Table showing 'Income'
col.names = "pretty")
names(attributes(fetched))
attr(fetched, "acs.colnames")
income_df <- data.frame(paste0(str_pad(fetched@geography$state, 2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract, 6, "left", pad="0")),
income@estimate[,c("Household Income: Total:",
"Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Household Income: Total:", "Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
acs_df<- select(acs_df, 1:3) %>% tbl_df()
rownames(acs_df)<- 1:nrow(acs_df)
names(acs_df)<- c("GEOID", "total", "over_200")
acs_df$percent<- 100*(acs_df$over_200/acs_df$total)
df_merged <- geo_join(tracts, acs_df, "GEOID", "GEOID")
# there are some tracts with no land that we should exclude
df_merged <- df_merged[df_merged$ALAND>0,]
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of Households above $200k: ", round(df_merged$percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = df_merged$percent
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = df_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of Households<br>above $200k",
labFormat = labelFormat(suffix = "%"))
knitr::opts_chunk$set(collapse=TRUE)
require(dplyr)
require(maptools) # required for rgdal to work correctly
require(tigris)
require(acs)
require(stringr) # to pad FIPS codes
require(leaflet)
tracts <- tracts(state = 'RI', cb=TRUE)
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2018, span = 1,# Package only goes to 2013, so end=2012
table.number = "B19001", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
## The resulting "fetched" object is not a data.frame; it's a list
names(attributes(fetched))    # see what's available
##  [1] "endyear"        "span"           "acs.units"      "currency.year"
##  [5] "modified"       "geography"      "acs.colnames"   "estimate"
##  [9] "standard.error" "class"
attr(fetched, "acs.colnames") # see column names
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Household Income: Total:", "Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
acs_df           <- select(acs_df, 1:3) %>% tbl_df()
rownames(acs_df) <- 1:nrow(acs_df)
names(acs_df)    <- c("GEOID", "total", "over_200")
acs_df$percent   <- 100*(acs_df$over_200/acs_df$total)
df_merged <- geo_join(tracts, acs_df, "GEOID", "GEOID")
# there are some tracts with no land that we should exclude
df_merged <- df_merged[df_merged$ALAND>0,]
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of Households above $200k: ", round(df_merged$percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = df_merged$percent
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = df_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of Households<br>above $200k",
labFormat = labelFormat(suffix = "%"))
knitr::opts_chunk$set(collapse=TRUE)
require(dplyr)
require(maptools) # required for rgdal to work correctly
require(tigris)
require(acs)
require(stringr) # to pad FIPS codes
require(leaflet)
tracts <- tracts(state = 'RI', cb=TRUE)
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2018, span = 1,# Package only goes to 2013, so end=2012
table.number = "S1501", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
## The resulting "fetched" object is not a data.frame; it's a list
names(attributes(fetched))
install.packages("stringr")
devtools::install_github("tidyverse/stringr")
install.packages("tidyverse", dependencies = TRUE)
install.packages("tidyverse", dependencies = TRUE)
install.packages("tidyverse")
install.packages("tidyverse")
library(stringi)
library(stringr)
library(tidyverse)
library(xml2)
detach("package:xml2", unload = TRUE)
library(tidyverse)
require(maptools) # required for rgdal to work correctly
library(maptools) # required for rgdal to work correctly
library(tigris)
library(acs)
# require(stringr) # to pad FIPS codes
library(leaflet)
detach("package:tidyverse", unload = TRUE)
library(tidyverse)
library(tigris)
detach("package:tigris", unload = TRUE)
install.packages("tigris")
library(rgdal)
detach("package:rgdal", unload = TRUE)
install.packages("rgdal")
install.packages("tigris")
install.packages("proj4")
install.packages("tigris")
devtools::install_github('walkerke/tigris')
install.packages("sf")
install.packages("remotes")
library(remotes)
detach("package:remotes", unload = TRUE)
install_github("r-spatial/sf")
library(devtools)
install_github("r-spatial/sf")
library(devtools)
install_github("r-spatial/sf")
devtools::install_github('walkerke/tigris')
library(tidyverse)
library(maptools) # required for rgdal to work correctly
library(tigris)
library(acs)
library(leaflet)
tracts <- tracts(state = 'RI', cb=TRUE)
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2018, span = 1,# Package only goes to 2013, so end=2012
table.number = "S1501", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2018, span = 1,# Package only goes to 2013, so end=2012
table.number = "B14005", # Table showing 'Income'
col.names = "pretty")
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2012, span = 5,# Package only goes to 2013, so end=2012
table.number = "B14005", # Table showing 'Income'
col.names = "pretty")
names(attributes(fetched))    # see what's available
attr(fetched, "acs.colnames") # see column names
fetched@geography
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Household Income: Total:", "Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
# fetched@estimate[,c("Household Income: Total:", "Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
View(acs_df)
knitr::opts_chunk$set(collapse=TRUE)
require(dplyr)
require(maptools) # required for rgdal to work correctly
require(tigris)
require(acs)
require(stringr) # to pad FIPS codes
require(leaflet)
tracts <- tracts(state = 'RI', cb=TRUE)
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2018, span = 1,# Package only goes to 2013, so end=2012
table.number = "B19001", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
## The resulting "fetched" object is not a data.frame; it's a list
names(attributes(fetched))    # see what's available
##  [1] "endyear"        "span"           "acs.units"      "currency.year"
##  [5] "modified"       "geography"      "acs.colnames"   "estimate"
##  [9] "standard.error" "class"
attr(fetched, "acs.colnames") # see column names
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Household Income: Total:", "Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
acs_df           <- select(acs_df, 1:3) %>% tbl_df()
rownames(acs_df) <- 1:nrow(acs_df)
names(acs_df)    <- c("GEOID", "total", "over_200")
acs_df$percent   <- 100*(acs_df$over_200/acs_df$total)
df_merged <- geo_join(tracts, acs_df, "GEOID", "GEOID")
# there are some tracts with no land that we should exclude
df_merged <- df_merged[df_merged$ALAND>0,]
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of Households above $200k: ", round(df_merged$percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = df_merged$percent
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = df_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of Households<br>above $200k",
labFormat = labelFormat(suffix = "%"))
knitr::opts_chunk$set(collapse=TRUE)
require(dplyr)
require(maptools) # required for rgdal to work correctly
require(tigris)
require(acs)
require(stringr) # to pad FIPS codes
require(leaflet)
tracts <- tracts(state = 'RI', cb=TRUE)
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2012, span = 5,# Package only goes to 2013, so end=2012
table.number = "B19001", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
## The resulting "fetched" object is not a data.frame; it's a list
names(attributes(fetched))    # see what's available
##  [1] "endyear"        "span"           "acs.units"      "currency.year"
##  [5] "modified"       "geography"      "acs.colnames"   "estimate"
##  [9] "standard.error" "class"
attr(fetched, "acs.colnames") # see column names
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Household Income: Total:", "Household Income: $200,000 or more")],
stringsAsFactors = FALSE)
acs_df           <- select(acs_df, 1:3) %>% tbl_df()
rownames(acs_df) <- 1:nrow(acs_df)
names(acs_df)    <- c("GEOID", "total", "over_200")
acs_df$percent   <- 100*(acs_df$over_200/acs_df$total)
df_merged <- geo_join(tracts, acs_df, "GEOID", "GEOID")
# there are some tracts with no land that we should exclude
df_merged <- df_merged[df_merged$ALAND>0,]
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of Households above $200k: ", round(df_merged$percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = df_merged$percent
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = df_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of Households<br>above $200k",
labFormat = labelFormat(suffix = "%"))
?acs.fetch
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2018, span = 1,# Package only goes to 2013, so end=2012
table.number = "B19123", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2018,# Package only goes to 2013, so end=2012
table.number = "B19123", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2019,# Package only goes to 2013, so end=2012
table.number = "B19123", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2017,# Package only goes to 2013, so end=2012
table.number = "B19123", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
acs.lookup(endyear=2014, span=5, table.number="B01001")
acs.lookup(endyear=2014, span=5, table.number="B19123")
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2015, span = 5, # Package only goes to 2013, so end=2012
table.number = "B03002", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
names(attributes(fetched))    # see what's available
##  [1] "endyear"        "span"           "acs.units"      "currency.year"
##  [5] "modified"       "geography"      "acs.colnames"   "estimate"
##  [9] "standard.error" "class"
attr(fetched, "acs.colnames") # see column names
fetched@estimate
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2011, span = 5, # Package only goes to 2013, so end=2012
table.number = "B05001", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
names(attributes(fetched))    # see what's available
##  [1] "endyear"        "span"           "acs.units"      "currency.year"
##  [5] "modified"       "geography"      "acs.colnames"   "estimate"
##  [9] "standard.error" "class"
attr(fetched, "acs.colnames") # see column names
fetched@acs.colnames[,1]
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Nativity and Citizenship Status in the United States: Total:", "Nativity and Citizenship Status in the United States: Not a U.S. citizen")],
stringsAsFactors = FALSE)
acs_df           <- select(acs_df, 1:3) %>% tbl_df()
acs_df <- select(acs_df, 1:3) %>% tbl_df()
detach("package:tidyverse", unload = TRUE)
library(tidyverse)
acs_df <- select(acs_df, 1:3) %>% tbl_df()
knitr::opts_chunk$set(collapse=TRUE)
library(tidyverse)
library(maptools) # required for rgdal to work correctly
library(tigris)
library(acs)
library(leaflet)
tracts <- tracts(state = 'RI', cb=TRUE)
fetched <- acs.fetch(
geography = geo.make(state = "RI", county="*", tract = "*"),
endyear = 2011, span = 5, # Package only goes to 2013, so end=2012
table.number = "B05001", # Table showing 'Income'
col.names = "pretty")    # Gives the full column definitions
## The resulting "fetched" object is not a data.frame; it's a list
names(attributes(fetched))    # see what's available
##  [1] "endyear"        "span"           "acs.units"      "currency.year"
##  [5] "modified"       "geography"      "acs.colnames"   "estimate"
##  [9] "standard.error" "class"
attr(fetched, "acs.colnames") # see column names
acs_df <- data.frame(
paste0(
str_pad(fetched@geography$state,  2, "left", pad="0"),
str_pad(fetched@geography$county, 3, "left", pad="0"),
str_pad(fetched@geography$tract,  6, "left", pad="0")),
fetched@estimate[,c("Nativity and Citizenship Status in the United States: Total:", "Nativity and Citizenship Status in the United States: Not a U.S. citizen")],
stringsAsFactors = FALSE)
acs_df <- select(acs_df, 1:3) %>% tbl_df()
rownames(acs_df) <- 1:nrow(acs_df)
names(acs_df)    <- c("GEOID", "total", "non_citizen")
acs_df$percent   <- 100*(acs_df$non_citizen/acs_df$total)
df_merged <- geo_join(tracts, acs_df, "GEOID", "GEOID")
df_merged <- df_merged[df_merged$ALAND>0,]
popup <- paste0("GEOID: ", df_merged$GEOID, "<br>", "Percent of non-U.S. Citizens: ", round(df_merged$percent,2))
pal <- colorNumeric(
palette = "YlGnBu",
domain = df_merged$percent
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = df_merged,
fillColor = ~pal(percent),
color = "#b2aeae", # you need to use hex colors
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = df_merged$percent,
position = "bottomright",
title = "Percent of non-U.S.<br>Citizens",
labFormat = labelFormat(suffix = "%"))
detach("package:maptools", unload = TRUE)
