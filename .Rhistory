opacity = 1)
leaflet(test2) %>% addTiles() %>%
addAwesomeMarkers(~lon, ~lat, popup = ~Salary, icon = awesomeIcons(icon = 'ion-ionic', library = 'ion', markerColor = test2$Color_code),
label = lapply(labs, htmltools::HTML),labelOptions = labelOptions(textsize = "15px",
style=list(
'background'='rgba(243, 241, 239, 1)',
'border-color' = 'rgba(46, 49, 49, 1)',
'border-radius' = '2px',
'border-style' = 'solid',
'border-width' = '2px'))) %>%
addLegend("bottomright",
colors =c("#70AF28",  "#38ADDF", "	#F79530", "#CC3E24", "#575556"),
labels= c("Over £40,000","£30,000 - £39,999","£20,000 - £29,999","Below £20,000","Rate Unavailable"),
title= "Salary",
opacity = 1)
blogdown:::serve_site()
install.packages("magick")
library(tidyverse)
library(xml2)
library(rvest)
library(stringr)
library(jsonlite)
library(leaflet)
library(htmltools)
library(kableExtra)
library(magick)
install.packages("magick")
install.packages("magick")
install.packages("magick")
library(tidyverse)
library(xml2)
library(rvest)
library(stringr)
library(jsonlite)
library(leaflet)
library(htmltools)
library(kableExtra)
library(magick)
opts_template$set(squarefigure = list(fig.height = 6, fig.width = 6))
blogdown:::serve_site()
library(tidyverse)
library(xml2)
library(rvest)
library(stringr)
library(jsonlite)
library(leaflet)
library(htmltools)
library(kableExtra)
library(knitr)
library(magick)
opts_template$set(squarefigure = list(fig.height = 6, fig.width = 6))
blogdown:::serve_site()
![](/docs/scrape/scrape2.png)
library(readr)
Physics_Final_Jeopardy_ <- read_csv("~/Desktop/Physics Final Jeopardy!.csv")
View(Physics_Final_Jeopardy_)
names<-Physics_Final_Jeopardy_[,2]
View(names)
names2<-substr(names, 1, 3)
View(names2)
Physics_Final_Jeopardy_$name <- gsub("^.{0,3}", "", Physics_Final_Jeopardy_$$[,2])
Physics_Final_Jeopardy_$name <- gsub("^.{0,3}", "", Physics_Final_Jeopardy_[,2])
Physics_Final_Jeopardy_$name
Physics_Final_Jeopardy_$name <- gsub("^.{0,3}", "", Physics_Final_Jeopardy_[,2])
Physics_Final_Jeopardy_$name <- substring(Physics_Final_Jeopardy_[,2], 3)
View(Physics_Final_Jeopardy_$name)
Physics_Final_Jeopardy_[,2]  = substr(Physics_Final_Jeopardy_[,2],1,nchar(Physics_Final_Jeopardy_[,2])-3)
View(Physics_Final_Jeopardy_[,2])
stringr::str_extract(Physics_Final_Jeopardy_, "^.{2}")
library(readr)
Physics_Final_Jeopardy_ <- read_csv("~/Desktop/Physics Final Jeopardy!.csv")
View(Physics_Final_Jeopardy_)
names<-Physics_Final_Jeopardy_[,2]
View(names)
stringr::str_extract(names, "^.{2}")
substring(names, 2)
library(stringi)
stri_sub(names,2)
stri_sub(names[,1],2)
stri_sub(names[1],2)
is.character(names)
typeof(names)
for(i in 1: length(names)
{
stri_sub(names,2)
}
for(i in 1: length(names)
{
substring(i, 2)
}
for(i in 1: length(names)
{
substring(x, 2)
}
jeo<-Physics_Final_Jeopardy_
jeo$names<-jeo[,2]
jeo$names
jeo$names = substr(jeo$names,1,nchar(jeo$names)-2)
jeo$names
jeo$names = substr(jeo$names,1,nchar(jeo$names)-2)
View(jeo$names)
is.data.frame(jeo)
jeo$names<-jeo[,2]
View(jeo$names)
View(jeo)
jeo[,2]<-jeo$names
View(jeo)
View(jeo[,2])
jeo$names<-jeo$`#SPILL!`
View(jeo)
head(jeo)
jeo$`#SPILL!`<-jeo$names
View(jeo)
colnames(jeo)[colnames(jeo) == "#SPILL!"] <- "names"
View(jeo)
jeo$names = substr(jeo$names,1,nchar(jeo$names)-2)
View(jeo)
jeo$names = substr(jeo$names,1,nchar(jeo$names)2)
jeo$names = substr(jeo$names,1,nchar(jeo$names),2)
jeo$names = substr(jeo$names,1,nchar(jeo$names),+2)
jeo$names = substr(jeo$names,3,nchar(jeo$names))
View(jeo)
jeo$names = substr(jeo$names,1,nchar(jeo$names)-12)
View(jeo)
setwd("~/Desktop")
write.csv(jeo, "jeopardy.csv")
blogdown:::serve_site()
library(png)
library(grid)
img <- readPNG("scrape2.png")
grid.raster(img)
library(png)
library(grid)
img <- readPNG("scrape2.png")
grid.raster(img)
head(test2) %>%
kable %>%
kable_styling(bootstrap_options = "striped", full_width = F)
library(tidyverse)
library(xml2)
library(rvest)
library(stringr)
library(jsonlite)
library(leaflet)
library(htmltools)
library(kableExtra)
library(knitr)
head(test2) %>%
kable %>%
kable_styling(bootstrap_options = "striped", full_width = F)
blogdown:::serve_site()
leaflet(test2) %>%
addTiles() %>%
addAwesomeMarkers(~lon, ~lat, popup = ~Salary,
icon = awesomeIcons(icon = 'ion-ionic',
library = 'ion',
markerColor = test2$Color_code),
label = lapply(labs, htmltools::HTML),
labelOptions = labelOptions(textsize = "15px",
style=list(
'background'='rgba(243, 241, 239, 1)',
'border-color' = 'rgba(46, 49, 49, 1)',
'border-radius' = '2px',
'border-style' = 'solid',
'border-width' = '2px'))) %>%
addLegend("bottomright",
colors =c("#70AF28",  "#38ADDF", "	#F79530", "#CC3E24", "#575556"),
labels= c("Over £40,000","£30,000 - £39,999","£20,000 - £29,999","Below £20,000","Rate Unavailable"),
title= "Salary",
opacity = 1)
setwd("~/Desktop/R/scott-website/content/docs/eda")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::build_site()
blogdown:::build_site()
library(shiny); runApp('~/Desktop/R/slagMaps/slagMaps.R')
install.packages(c("highcharter", "tidytext", "topicmodels", "wordcloud"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(leaflet)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
library(tidyverse)
library(leaflet)
library(jsonlite)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("geojson")
install.packages("geojson")
install.packages("geojson")
library(tidyverse)
library(leaflet)
library(geojson)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("geojsonio")
library(tidyverse)
library(leaflet)
library(geojsonio)
install.packages("geojsonio")
install.packages("geojsonio")
install.packages("rgeos")
install.packages("rgdax")
install.packages("rgdal")
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages("rgdal")
install.packages("rgeos")
install.packages("rgeos")
install.packages("geojsonio")
install.packages("sf")
library(tidyverse)
library(leaflet)
library(geojson)
states <- geojson_read("json/us-states.geojson", what = "sp")
states <- geojson::read("json/us-states.geojson", what = "sp")
install.packages("geojsonio")
library(raster)
library(leaflet)
library(tidyverse)
# Get UK polygon data
UK <- getData("GADM", country = "GB", level = 2)
### Create dummy data
set.seed(111)
mydf <- data.frame(place = unique(UK$NAME_2),
value = sample.int(n = 1000000, size = n_distinct(UK$NAME_2), replace = TRUE))
### Create five colors for fill
mypal <- colorQuantile(palette = "RdYlBu", domain = mydf$value, n = 5, reverse = TRUE)
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lat = 55, lng = -3, zoom = 6) %>%
addPolygons(data = UK,
stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.3,
fillColor = ~mypal(mydf$value),
popup = paste("Region: ", UK$NAME_2, "<br>",
"Value: ", mydf$value, "<br>")) %>%
addLegend(position = "bottomright", pal = mypal, values = mydf$value,
title = "UK value",
opacity = 1)
library(raster)
library(leaflet)
library(tidyverse)
library(htmlwidgets)
library(htmltools)
library(raster)
library(leaflet)
library(tidyverse)
library(htmlwidgets)
library(htmltools)
# Get UK polygon data
UK <- getData("GADM", country = "GB", level = 2)
### Create dummy data
set.seed(111)
mydf <- data.frame(place = unique(UK$NAME_2),
value = sample.int(n = 1000000, size = n_distinct(UK$NAME_2), replace = TRUE))
### Create five colors for fill
mypal <- colorQuantile(palette = "RdYlBu", domain = mydf$value, n = 5, reverse = TRUE)
leafMap<-leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lat = 55, lng = -3, zoom = 6) %>%
addPolygons(data = UK,
stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.3,
fillColor = ~mypal(mydf$value),
popup = paste("Region: ", UK$NAME_2, "<br>",
"Value: ", mydf$value, "<br>")) %>%
addLegend(position = "bottomright", pal = mypal, values = mydf$value,
title = "UK value",
opacity = 1)
currentWD <- getwd()
dir.create("static/leaflet", showWarnings = FALSE)
setwd("static/leaflet")
saveWidget(leafMap, "leafMap.html")
setwd(currentWD)
setwd("~/Desktop/R/scott-website/static")
saveWidget(leafMap, "leafMap.html")
blogdown:::serve_site()
blogdown:::serve_site()
install.packages(c("here", "sf", "widgetframe"))
install.packages("sf")
library(devtools)
install_github("r-spatial/sf")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
setwd("~/Desktop/R/scott-website")
blogdown:::serve_site()
blogdown:::build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE)
dc_crime <- sf::st_read("https://opendata.arcgis.com/datasets/dc3289eab3d2400ea49c154863312434_8.geojson", quiet = TRUE)
m <- leaflet() %>%
addTiles() %>%
addCircles(data = dc_crime, color = "#800000")
library(tidyverse)
library(leaflet)
library(stringr)
library(sf)
library(here)
library(widgetframe)
options(digits = 3)
set.seed(1234)
theme_set(theme_minimal())
dc_crime <- sf::st_read("https://opendata.arcgis.com/datasets/dc3289eab3d2400ea49c154863312434_8.geojson", quiet = TRUE)
m <- leaflet() %>%
addTiles() %>%
addCircles(data = dc_crime, color = "#800000")
m %>%
frameWidget()
blogdown:::serve_site()
install.packages('widgetframe')
install.packages("widgetframe")
blogdown:::serve_site()
library(leaflet)
library(widgetframe)
l <- leaflet(height=300) %>% addTiles() %>% setView(0,0,1)
frameWidget(l)
blogdown:::serve_site()
library(leaflet)
library(widgetframe)
l <- leaflet() %>% addTiles()
htmlwidgets::saveWidget(frameableWidget(l),'leaflet.html')
library(leaflet)
library(widgetframe)
library(raster)
library(leaflet)
library(tidyverse)
# Get UK polygon data
UK <- getData("GADM", country = "GB", level = 2)
### Create dummy data
set.seed(111)
mydf <- data.frame(place = unique(UK$NAME_2),
value = sample.int(n = 1000000, size = n_distinct(UK$NAME_2), replace = TRUE))
### Create five colors for fill
mypal <- colorQuantile(palette = "RdYlBu", domain = mydf$value, n = 5, reverse = TRUE)
l <- leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
setView(lat = 55, lng = -3, zoom = 6) %>%
addPolygons(data = UK,
stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.3,
fillColor = ~mypal(mydf$value),
popup = paste("Region: ", UK$NAME_2, "<br>",
"Value: ", mydf$value, "<br>")) %>%
addLegend(position = "bottomright", pal = mypal, values = mydf$value,
title = "UK value",
opacity = 1)
htmlwidgets::saveWidget(frameableWidget(l),'leaflet.html')
l2<-leaflet(test2) %>%
addTiles() %>%
addAwesomeMarkers(~lon, ~lat, popup = ~Salary,
icon = awesomeIcons(icon = 'ion-ionic',
library = 'ion',
markerColor = test2$Color_code),
label = lapply(labs, htmltools::HTML),
labelOptions = labelOptions(textsize = "15px",
style=list(
'background'='rgba(243, 241, 239, 1)',
'border-color' = 'rgba(46, 49, 49, 1)',
'border-radius' = '2px',
'border-style' = 'solid',
'border-width' = '2px'))) %>%
addLegend("bottomright",
colors =c("#70AF28",  "#38ADDF", "	#F79530", "#CC3E24", "#575556"),
labels= c("Over £40,000","£30,000 - £39,999","£20,000 - £29,999","Below £20,000","Rate Unavailable"),
title= "Salary",
opacity = 1)
htmlwidgets::saveWidget(frameableWidget(l2),'leafletscrape.html')
install.packages("geojsonio")
library(leaflet)
library(widgetframe)
library(raster)
library(leaflet)
library(tidyverse)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
library(leaflet)
library(widgetframe)
library(raster)
library(leaflet)
library(tidyverse)
states <- geojsonio::geojson_read("https://leafletjs.com/examples/choropleth/us-states.js", what = "sp")
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
library(leaflet)
library(widgetframe)
library(raster)
library(leaflet)
library(tidyverse)
url <- "http://leafletjs.com/examples/choropleth/us-states.js"
# read as text file
doc <- readLines(url)
# remove the javascript assignment at the front
doc2 <- gsub("var statesData = ", "", doc)
# write out as a temp file and read
write(doc2, file = "tempgeo.json")
states <- geojson_read("tempgeo.json", what = "sp")
library(leaflet)
library(widgetframe)
library(raster)
library(leaflet)
library(tidyverse)
library(geojsonio)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
library(leaflet)
library(widgetframe)
library(raster)
library(leaflet)
library(tidyverse)
library(geojson)
url <- "http://leafletjs.com/examples/choropleth/us-states.js"
# read as text file
doc <- readLines(url)
# remove the javascript assignment at the front
doc2 <- gsub("var statesData = ", "", doc)
# write out as a temp file and read
write(doc2, file = "tempgeo.json")
states <- geojson_read("tempgeo.json", what = "sp")
library(leaflet)
library(widgetframe)
library(raster)
library(leaflet)
library(tidyverse)
library(geojsonio)
url <- "http://leafletjs.com/examples/choropleth/us-states.js"
# read as text file
doc <- readLines(url)
# remove the javascript assignment at the front
doc2 <- gsub("var statesData = ", "", doc)
# write out as a temp file and read
write(doc2, file = "tempgeo.json")
states <- geojson_read("tempgeo.json", what = "sp")
url <- "http://leafletjs.com/examples/choropleth/us-states.js"
# read as text file
doc <- readLines(url)
# remove the javascript assignment at the front
doc2 <- gsub("var statesData = ", "", doc)
# write out as a temp file and read
write(doc2, file = "tempgeo.json")
states <- geojson_read("tempgeo.json", what = "sp")
library(leaflet)
library(widgetframe)
library(raster)
library(leaflet)
library(tidyverse)
library(geojson)
library(geojsonio)
url <- "http://leafletjs.com/examples/choropleth/us-states.js"
# read as text file
doc <- readLines(url)
# remove the javascript assignment at the front
doc2 <- gsub("var statesData = ", "", doc)
# write out as a temp file and read
write(doc2, file = "tempgeo.json")
states <- geojson_read("tempgeo.json", what = "sp")
library(leaflet)
library(widgetframe)
library(raster)
library(leaflet)
library(tidyverse)
library(geojson)
library(geojsonio)
url <- "http://leafletjs.com/examples/choropleth/us-states.js"
# read as text file
doc <- readLines(url)
# remove the javascript assignment at the front
doc2 <- gsub("var statesData = ", "", doc)
# write out as a temp file and read
write(doc2, file = "tempgeo.json")
states <- geojson_read("tempgeo.json")
library(leaflet)
library(widgetframe)
library(raster)
library(leaflet)
library(tidyverse)
library(geojson)
library(geojsonio)
url <- "http://leafletjs.com/examples/choropleth/us-states.js"
# read as text file
doc <- readLines(url)
# remove the javascript assignment at the front
doc2 <- gsub("var statesData = ", "", doc)
# write out as a temp file and read
write(doc2, file = "tempgeo.geojson")
states <- geojson_read("tempgeo.geojson", what = "sp")
st_drivers()
doc2
write(doc2, file = "tempgeo.json")
states <- geojson_read("tempgeo.json", what = "sp")
states <- geojsonio::geojson_read("tempgeo.json", what = "sp")
nycounties <- rgdal::readOGR("json/nycounties.geojson")
library(rgdal)
nycounties <- rgdal::readOGR("json/nycounties.geojson")
xy <- geojsonio::geojson_read("gz_2010_us_050_00_500k.json", what = "sp")
nycounties <- rgdal::readOGR("json/nycounties.geojson", "OGRGeoJSON")
nycounties <- rgdal::readOGR(dsn="json/nycounties.geojson", layer="OGRGeoJSON")
counties <- readOGR(dsn = "./gz_2010_us_050_00_20m.json", layer= "gz_2010_us_050_00_20m")
maine <- readOGR(dsn="/data/maine.geojson", layer="maine")
install.packages("rgdal")
maine <- readOGR(dsn="/data/maine.geojson", layer="maine")
countries <- readOGR("https://raw.githubusercontent.com/datasets/geoboundaries-world-110m/master/countries.geojson", layer = "countries")
write(doc2, file = "tempgeo.GeoJSON")
states <- geojsonio::geojson_read("tempgeo.GeoJSON", what = "sp")
write(doc2, file = "tempgeo.geojson")
states <- geojsonio::geojson_read("tempgeo.geojson", what = "sp")
states <- geojson_read("tempgeo.geojson", what = "sp")
park <- readOGR(dsn="spatial_files/providence_park.geojson", layer="OGRGeoJSON")
cities <- readOGR(system.file("vectors", package = "rgdal")[1], "cities")
nycounties <- geojsonio::geojson_read("json/nycounties.geojson", what = "sp")
nycounties <- rgdal::readOGR("json/nycounties.geojson")
rgdal::getGDALVersionInfo()
url <- "http://leafletjs.com/examples/choropleth/us-states.js"
url.exists(url)
states <- geojsonio::geojson_read(url, what="sp")
countries <- readOGR("https://raw.githubusercontent.com/datasets/geo-boundaries-world-110m/master/countries.geojson", "OGRGeoJSON")
url <- "https://raw.githubusercontent.com/lecy/geojson/master/myfile.geojson"
syr <- geojson_read(url, what = "sp")
